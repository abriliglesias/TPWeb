// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package bd

import (
	"context"
	"database/sql"
)

const createLibro = `-- name: CreateLibro :one
INSERT INTO libros (titulo, autor, descripcion, valoracion, anio, genero_principal)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, titulo
`

type CreateLibroParams struct {
	Titulo          string        `json:"titulo"`
	Autor           string        `json:"autor"`
	Descripcion     string        `json:"descripcion"`
	Valoracion      sql.NullInt32 `json:"valoracion"`
	Anio            int32         `json:"anio"`
	GeneroPrincipal string        `json:"genero_principal"`
}

type CreateLibroRow struct {
	ID     int32  `json:"id"`
	Titulo string `json:"titulo"`
}

func (q *Queries) CreateLibro(ctx context.Context, arg CreateLibroParams) (CreateLibroRow, error) {
	row := q.db.QueryRowContext(ctx, createLibro,
		arg.Titulo,
		arg.Autor,
		arg.Descripcion,
		arg.Valoracion,
		arg.Anio,
		arg.GeneroPrincipal,
	)
	var i CreateLibroRow
	err := row.Scan(&i.ID, &i.Titulo)
	return i, err
}

const deleteLibro = `-- name: DeleteLibro :exec
DELETE FROM libros WHERE id = $1
`

func (q *Queries) DeleteLibro(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteLibro, id)
	return err
}

const getLibroByID = `-- name: GetLibroByID :one
SELECT id, titulo, autor, descripcion, valoracion, anio, genero_principal FROM libros WHERE id = $1
`

func (q *Queries) GetLibroByID(ctx context.Context, id int32) (Libro, error) {
	row := q.db.QueryRowContext(ctx, getLibroByID, id)
	var i Libro
	err := row.Scan(
		&i.ID,
		&i.Titulo,
		&i.Autor,
		&i.Descripcion,
		&i.Valoracion,
		&i.Anio,
		&i.GeneroPrincipal,
	)
	return i, err
}

const listLibros = `-- name: ListLibros :many
SELECT id, titulo, autor, descripcion, valoracion, anio, genero_principal FROM libros
`

func (q *Queries) ListLibros(ctx context.Context) ([]Libro, error) {
	rows, err := q.db.QueryContext(ctx, listLibros)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Libro
	for rows.Next() {
		var i Libro
		if err := rows.Scan(
			&i.ID,
			&i.Titulo,
			&i.Autor,
			&i.Descripcion,
			&i.Valoracion,
			&i.Anio,
			&i.GeneroPrincipal,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLibro = `-- name: UpdateLibro :exec
UPDATE libros SET titulo = $2, autor = $3, descripcion = $4, valoracion = $5, anio = $6, genero_principal = $7 WHERE id = $1
`

type UpdateLibroParams struct {
	ID              int32         `json:"id"`
	Titulo          string        `json:"titulo"`
	Autor           string        `json:"autor"`
	Descripcion     string        `json:"descripcion"`
	Valoracion      sql.NullInt32 `json:"valoracion"`
	Anio            int32         `json:"anio"`
	GeneroPrincipal string        `json:"genero_principal"`
}

func (q *Queries) UpdateLibro(ctx context.Context, arg UpdateLibroParams) error {
	_, err := q.db.ExecContext(ctx, updateLibro,
		arg.ID,
		arg.Titulo,
		arg.Autor,
		arg.Descripcion,
		arg.Valoracion,
		arg.Anio,
		arg.GeneroPrincipal,
	)
	return err
}
